".source.genexpr":
  "Buffer object":
    prefix: "buffer"
    body: '''
      
      Buffer ${1:name}("${2:name}");
      ${3:${4:${1:name}_dim} = dim(${1:name});
      ${5:${1:name}_chans} = channels(${1:name});}
      
    '''
  "Cycle operator with frequency input":
    prefix: "cycle"
    body: '''
      
      ${1:sampleName}${2:, ${3:sampleIndex}} = cycle(${4:440.0}${5:, name="${6:buffername}"});
      
    '''
  "Cycle operator with phase input":
    prefix: "cyclePhase"
    body: '''
      
      ${1:sampleName}${2:, ${3:sampleIndex}} = cycle(${4:0}, index="phase"${5:, name="${6:buffername}"});
      
    '''
  "Data Object":
    prefix: "data"
    body: '''
      
      Data ${1:name}(${2:${3:512}}${4:, ${5:1}});
      ${6:${7:${1:name}_dim} = dim(${1:name});
      ${8:${1:name}_chans} = channels(${1:name});}
      
    '''
  delay:
    prefix: "delay"
    body: '''
      
      Delay ${1:name}(${2:44100});
      ${3:${4:tmp} = ${1:name}.read(${5:44100}${6:, interp="${7:linear}"});
      ${8:${1:name}.write(${9:someSample});}}
      
    '''
  for:
    prefix: "for"
    body: '''
      
      for (${1:i} = ${2:0}; ${1:i} < ${3:maximum}; ${1:i} += ${4:1}) {
      	${5:/* something to do multiple times */}
      }
      
    '''
  function:
    prefix: "function"
    body: '''
      
      ${1:functionName}(${2:arg1}${3:, ${4:arg2...}})
      {
      	${5:/* your function body */}
      }
      
    '''
  history:
    prefix: "history"
    body: '''
      
      History ${1:name}(${2:0.0});
      
    '''
  param:
    prefix: "param"
    body: '''
      
      Param ${1:paramName}(${2:0.0}${3:${4:, min=${5:0.0}}${6:, max=${7:1.0}}});
      
    '''
  peek:
    prefix: "peek"
    body: '''
      
      ${1:sampleOut}${2:, ${3:sampleIndex}} = peek(${4:bufferOrDataName}, ${5:position}, 0${6: /* channel offset */}, index="${7:samples}", channels=${8:1});
      
    '''
  poke:
    prefix: "poke"
    body: '''
      
      poke(${1:bufferOrDataName}, ${2:sampleToWrite}, ${3:sampleIndex}, 0${4: /* channel */}, 0${5: /* overdub */}, index="${6:samples}");
      
    '''
  return:
    prefix: "return"
    body: '''
      
      return ${1:something}${2:, ${3:somethingElse}${4:, ${5:andAThirdOne}}};
      
    '''
  "Wrap a number between 2 values":
    prefix: "wrap"
    body: '''
      
      ${1:wrappedValue} = wrap(${2:input}, ${3:minimum}, ${4:maximum});
      
    '''
